package com.example.brady.myapplication;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.Settings;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;

import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.mashape.relocation.entity.mime.HttpMultipartMode;
import com.mashape.relocation.entity.mime.MultipartEntity;
import com.mashape.relocation.entity.mime.content.FileBody;
import com.mashape.relocation.entity.mime.content.StringBody;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import org.apache.http.util.EntityUtils;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.json.JSONException;
import org.json.JSONObject;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Locale;

import cat.lafosca.facecropper.FaceCropper;

public class MainActivity extends Activity implements TextToSpeech.OnInitListener,Camera.ShutterCallback,Camera.PictureCallback,SurfaceHolder.Callback{


    private static final String API_KEY = "cwgLS8bE16Rv6on0";
    private static final String API_SECRET = "rPtvUe3aSd1eEq2G";
    private static final String NAME_SPACE = "demo_project";
    private static final String USER_ID = "demo_user";

    private static final String FILE_PATH = "wyn.jpg";
    private static final String ALBUM_KEY = "d1e462ca178d2282be15894f42f12cb60d95105cc44ef9781f227fa3fbfeae93";
    private static final String ALBUM_NAME = "PennApps";

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;
    private SurfaceView mSurfaceView;
    private Camera cam;

    /**
     * {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    private TextToSpeech mTts;
    private int  MY_DATA_CHECK_CODE = 123;

    @Override
    protected void onActivityResult(
            int requestCode, int resultCode, Intent data) {
        if (requestCode == MY_DATA_CHECK_CODE) {
            if (resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS) {
                // success, create the TTS instance
                mTts = new TextToSpeech(this, this);
            } else {
                // missing data, install it
                Intent installIntent = new Intent();
                installIntent.setAction(
                        TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);
                startActivity(installIntent);
            }
        }
    }

    private static final String TAG = "MyActivity";


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        //mView = buildView();

        /* All the camera interaction is here */
        Settings.System.putInt(getContentResolver(), Settings.System.SCREEN_OFF_TIMEOUT, 600000);
        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);//int flag, int mask
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.surface);
        mSurfaceView = (SurfaceView) findViewById(R.id.surf);

        cam = Camera.open();
        snapPicture();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        Intent checkIntent = new Intent();
        checkIntent.setAction(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA);
        startActivityForResult(checkIntent, MY_DATA_CHECK_CODE);
    }


    @Override
    public void onShutter() {
        /* This is where we put shutter sound */
        return;
    }

    /**
     *  Callback interface used to supply image data from a photo capture.
     */
    @Override
    public void onPictureTaken(byte[] bytes, Camera camera) {
        FileOutputStream fos= null;

        /* Write byte array to jpeg file */
        try {
            File photo = new File(this.getCacheDir(), FILE_PATH);
            if (photo.exists()) {
                photo.delete();
            }

//            byte[] cropped = cropAndScale(bytes);

            fos = new FileOutputStream(photo.getPath());
            fos.write(bytes);
            fos.close();

            PhotoAsyncTask task = new PhotoAsyncTask();
            task.execute(photo.getPath());
//            processPhoto(bytes);
        } catch (IOException e){
            e.printStackTrace();
        }
        return;
    }

    private class PhotoAsyncTask extends AsyncTask<String, Void, JSONObject>{
        /* Makes Post request */
        @Override
        protected JSONObject doInBackground(String... strings) {
            try {
                HttpResponse<JsonNode> response = Unirest.post("https://lambda-face-recognition.p.mashape.com/recognize")
                        .header("X-Mashape-Key", "rnR1FFttHMmsh5QoMeo6UUUpPngdp1xhdlejsnq2w1xOWCap8z")
//                        .header("Accept", "application/json")
                        .field("album", "PennApps")
                        .field("albumkey", "d1e462ca178d2282be15894f42f12cb60d95105cc44ef9781f227fa3fbfeae93")
                        .field("files", new File(strings[0]))
                        .asJson();
                return response.getBody().getObject();
            } catch (UnirestException e) {
                e.printStackTrace();
                return null;
            }
        }
        /* Parses JSON, reads result to user */
        @Override
        protected void onPostExecute(final JSONObject jsonObject) {
            super.onPostExecute(jsonObject);
            Log.e(TAG, jsonObject.toString());
            try {
                String prediction = jsonObject.getJSONArray("photos").getJSONObject(0)
                        .getJSONArray("tags").getJSONObject(0).getJSONArray("uids")
                        .getJSONObject(0).getString("prediction");
                Log.e(TAG, "prediction: " + prediction);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }


    private void processPhoto(byte[] photo) {
//        recognize(photo);
//        recognize(cropAndScale(photo));
    }


    private byte[] cropAndScale(byte[] photo) {
        // crops image to face and scales it to 800 x 800
        Bitmap bitmap = BitmapFactory.decodeByteArray(photo, 0, photo.length);
        FaceCropper mFaceCropper = new FaceCropper();
        mFaceCropper.setMaxFaces(1);
        Bitmap cropped = mFaceCropper.getCroppedImage(bitmap);
        Bitmap scaled = Bitmap.createScaledBitmap(cropped, 800, 800, false);

        // convert to byte[]
//        ByteBuffer byteBuffer = ByteBuffer.allocate(scaled.getByteCount());
//        bitmap.copyPixelsToBuffer(byteBuffer);
//        byte[] bytes = byteBuffer.array();

        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        scaled.compress(Bitmap.CompressFormat.JPEG, 100, stream);
        byte[] bytes = stream.toByteArray();

        ImageView iv = new ImageView(this);
        iv.setImageBitmap(scaled);
        ((FrameLayout)findViewById(R.id.layout)).addView(iv);

        return bytes;
    }

//    private void recognize(byte[] photo) {
//        ByteArrayOutputStream stream = new ByteArrayOutputStream();
//        bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
//        byte[] photo = stream.toByteArray();
//
//        // These code snippets use an open-source library. http://unirest.io/java
//        try {
//            // These code snippets use an open-source library.
//            HttpResponse<JsonNode> response = Unirest.post("https://lambda-face-recognition.p.mashape.com/recognize")
//                    .header("X-Mashape-Key", "rnR1FFttHMmsh5QoMeo6UUUpPngdp1xhdlejsnq2w1xOWCap8z")
//                    .field("album", ALBUM_NAME)
//                    .field("albumkey", ALBUM_KEY)
//                    .field("files", photoFile)
//                    .asJson();
//
//            // parse JSON
//            try {
//                String prediction = response.getBody().getObject().getJSONArray("photos").getJSONObject(0)
//                        .getJSONArray("tags").getJSONObject(0).getJSONArray("uids")
//                        .getJSONObject(0).getString("prediction");
//                Log.e(TAG, "prediction: " + prediction);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        } catch (UnirestException e) {
//            e.printStackTrace();
//        }
//    }

    private String parseResponse(String response) {
        return response.substring(response.indexOf(":")).replaceAll("_", " ").toUpperCase();
    }

    @Override
    public void surfaceCreated(SurfaceHolder surfaceHolder) {
    }

    /**
     * Starts preview and takes picture.
     */
    @Override
    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
        if(surfaceHolder.getSurface() == null || cam == null) {
            return;
        }

        //stop preview before make changes
        cam.stopPreview();

        //start preview with new setting
        try {
            cam.setPreviewDisplay(surfaceHolder);
            cam.startPreview();
            cam.takePicture(this,null,null,this);
        } catch (IOException e) {
            Log.e("MainActivity","problem setting up camera",e);
        }
    }

    /**
     * Stops preview and releases camera
     */
    @Override
    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
        surfaceHolder.removeCallback(this);
        cam.lock();
        cam.stopPreview();
        cam.release();
        surfaceHolder = null;
    }

    /* Camera stuff */
    protected void snapPicture() {
        SurfaceHolder holder = mSurfaceView.getHolder();
        holder.addCallback(this);
    }

    /**
     *  Runs after taking picture. Sets loading bar and reads "loading" out loud.
     */
    @Override
    protected void onResume() {
        super.onResume();
        findViewById(R.id.progressContainer).setVisibility(View.GONE);
        ((TextView) findViewById(R.id.textview)).setText(getString(R.string.loading));

    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    /**
     * Builds a view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);
        return card.getView();
    }

    @Override
    public void onInit(int i) {
        Log.i("MainActivity", "Works: " + i);
        mTts.setLanguage(Locale.US);
    }

    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        if ( mTts != null)
        {
            mTts.stop();
            mTts.shutdown();
        }
    }
}